// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  applications         Application[]
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Application {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  appType AppType @default(MENTOR)
  isApproved Boolean @default(false)
  kidName String?
  kid Kid?
  mentor Mentor?
  }

enum AppType {
  KID
  MENTOR
}

model Kid {
  id String @default(cuid()) @id
  kidName String
  app Application? @relation(fields: [appId], references: [id])
  appId String @unique
  appointments Appointment[]
  @@map(name: "kids")
}

model Mentor {
  id String @default(cuid()) @id
  mentorName String
  app Application? @relation(fields: [appId], references: [id])
  appId String @unique
  appointments Appointment[]
  @@map(name: "mentors")
}

model Appointment {
  id String @default(cuid()) @id
  startTime DateTime @default(now()) @db.Timestamp()
  endTime DateTime? @db.Timestamp()
  isScheduled Boolean @default(false)
  isActive Boolean @default(false)
  kid Kid? @relation(fields: [kidId], references: [id])
  kidId String?
  mentor Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?
}